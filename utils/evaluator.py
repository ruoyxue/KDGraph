import numpy as np
from ctypes import CDLL
from .convert import convert
import ctypes
import os


class APLSEvaluator:
    """ calculate APLS as metric """
    def __init__(self):
        self.APLS_total = 0
        self.image_count = 0
        
        self.apls_calculator = CDLL("./apls_spacenet.so").compute  # The so file is generated by apls.go
        self.apls_calculator.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
        self.apls_calculator.restype = ctypes.c_float

    def accumulate(self, pred_pickle_graph_list, gt_pickle_graph_list, tem_save_path):
        """
        Calculate APLS of a batch

        Args:
            pred_pickle_graph_list: List[Dict[Tuple, List[Tuple]]]
            gt_pickle_graph_list: List[Dict[Tuple, List[Tuple]]]
        """
        assert len(pred_pickle_graph_list) == len(gt_pickle_graph_list)
        batch_size = len(pred_pickle_graph_list)
        for batch_idx in range(batch_size):
            apls = self.compute_apls(pred_pickle_graph_list[batch_idx], gt_pickle_graph_list[batch_idx], tem_save_path)
            if not np.isnan(apls):
                self.image_count += 1
                self.APLS_total += apls

        return

    def compute_apls(self, pickle_graph_1, pickle_graph_2, tem_save_path):
        """
        Calculate APLS of single image

        Notes:
            pickle_graph_1: Dict[Tuple, List[Tuple]]
            pickle_graph_2: Dict[Tuple, List[Tuple]]

        Returns:
            APLS
        """
        convert(pickle_graph_1, os.path.join(tem_save_path, "./1.json"))
        convert(pickle_graph_2, os.path.join(tem_save_path, "./2.json"))
        
        apls = self.apls_calculator(os.path.join(tem_save_path, "./1.json").encode("utf-8"), \
                                    os.path.join(tem_save_path, "./2.json").encode("utf-8"))
        return apls

    def compute_metrics(self):
        """ compute metrics """
        return self.APLS_total / max(self.image_count, 1)

    def clear(self):
        """ Clear metrics and count """
        self.image_count = 0
        self.APLS_total = 0

